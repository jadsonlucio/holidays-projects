#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 17, 2020 03:16:19 AM PDT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import unknown_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    unknown_support.set_Tk_var()
    top = Toplevel1 (root)
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    unknown_support.set_Tk_var()
    top = Toplevel1 (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 9 -weight bold"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("808x770+689+199")
        top.minsize(120, 1)
        top.maxsize(3364, 1061)
        top.resizable(0, 0)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.frame1 = tk.Frame(top)
        self.frame1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.frame1.configure(relief='groove')
        self.frame1.configure(borderwidth="2")
        self.frame1.configure(relief="groove")
        self.frame1.configure(background="#d9d9d9")
        self.frame1.configure(highlightbackground="#d9d9d9")
        self.frame1.configure(highlightcolor="black")

        self.comboxbox_service = ttk.Combobox(self.frame1)
        self.comboxbox_service.place(relx=0.297, rely=0.035, relheight=0.027
                , relwidth=0.177)
        self.value_list = ['kami,','naruto',]
        self.comboxbox_service.configure(values=self.value_list)
        self.comboxbox_service.configure(state='readonly')
        self.comboxbox_service.configure(textvariable=unknown_support.combobox)
        self.comboxbox_service.configure(takefocus="")

        self.label1 = tk.Label(self.frame1)
        self.label1.place(relx=0.012, rely=0.026, height=31, width=215)
        self.label1.configure(activebackground="#f9f9f9")
        self.label1.configure(activeforeground="black")
        self.label1.configure(background="#d9d9d9")
        self.label1.configure(borderwidth="0")
        self.label1.configure(disabledforeground="#a3a3a3")
        self.label1.configure(font="-family {Tahoma} -size 14 -weight bold")
        self.label1.configure(foreground="#000000")
        self.label1.configure(highlightbackground="#d9d9d9")
        self.label1.configure(highlightcolor="black")
        self.label1.configure(padx="0")
        self.label1.configure(pady="0")
        self.label1.configure(text='''Available services''')

        self.label2 = tk.Label(self.frame1)
        self.label2.place(relx=0.037, rely=0.13, height=21, width=147)
        self.label2.configure(activebackground="#f9f9f9")
        self.label2.configure(activeforeground="black")
        self.label2.configure(background="#d9d9d9")
        self.label2.configure(disabledforeground="#a3a3a3")
        self.label2.configure(font="-family {Tahoma} -size 10 -weight bold")
        self.label2.configure(foreground="#000000")
        self.label2.configure(highlightbackground="#d9d9d9")
        self.label2.configure(highlightcolor="black")
        self.label2.configure(text='''Translate from''')

        self.comboxbox_t_from = ttk.Combobox(self.frame1)
        self.comboxbox_t_from.place(relx=0.223, rely=0.13, relheight=0.027
                , relwidth=0.177)
        self.comboxbox_t_from.configure(textvariable=unknown_support.combobox)
        self.comboxbox_t_from.configure(takefocus="")

        self.label3 = tk.Label(self.frame1)
        self.label3.place(relx=0.594, rely=0.13, height=21, width=92)
        self.label3.configure(activebackground="#f9f9f9")
        self.label3.configure(activeforeground="black")
        self.label3.configure(background="#d9d9d9")
        self.label3.configure(disabledforeground="#a3a3a3")
        self.label3.configure(font="-family {Tahoma} -size 10 -weight bold")
        self.label3.configure(foreground="#000000")
        self.label3.configure(highlightbackground="#d9d9d9")
        self.label3.configure(highlightcolor="black")
        self.label3.configure(text='''Translate into''')

        self.combobox_t_into = ttk.Combobox(self.frame1)
        self.combobox_t_into.place(relx=0.743, rely=0.13, relheight=0.027
                , relwidth=0.177)
        self.combobox_t_into.configure(textvariable=unknown_support.combobox)
        self.combobox_t_into.configure(takefocus="")

        self.translate_button = tk.Button(self.frame1)
        self.translate_button.place(relx=0.433, rely=0.766, height=94, width=137)

        self.translate_button.configure(activebackground="#ececec")
        self.translate_button.configure(activeforeground="#000000")
        self.translate_button.configure(background="#d9d9d9")
        self.translate_button.configure(disabledforeground="#a3a3a3")
        self.translate_button.configure(font="-family {Tahoma} -size 14 -weight bold")
        self.translate_button.configure(foreground="#000000")
        self.translate_button.configure(highlightbackground="#d9d9d9")
        self.translate_button.configure(highlightcolor="black")
        self.translate_button.configure(pady="0")
        self.translate_button.configure(text='''Translate''')

        self.Scrolledtext2 = ScrolledText(self.frame1)
        self.Scrolledtext2.place(relx=0.569, rely=0.169, relheight=0.526
                , relwidth=0.412)
        self.Scrolledtext2.configure(background="white")
        self.Scrolledtext2.configure(font="TkTextFont")
        self.Scrolledtext2.configure(foreground="black")
        self.Scrolledtext2.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext2.configure(highlightcolor="black")
        self.Scrolledtext2.configure(insertbackground="black")
        self.Scrolledtext2.configure(insertborderwidth="3")
        self.Scrolledtext2.configure(selectbackground="#c4c4c4")
        self.Scrolledtext2.configure(selectforeground="black")
        self.Scrolledtext2.configure(wrap="none")

        self.Scrolledtext1 = ScrolledText(self.frame1)
        self.Scrolledtext1.place(relx=0.05, rely=0.169, relheight=0.526
                , relwidth=0.412)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="none")

        self.button_load_file = tk.Button(self.frame1)
        self.button_load_file.place(relx=0.928, rely=0.013, height=40, width=37)
        self.button_load_file.configure(activebackground="#ececec")
        self.button_load_file.configure(activeforeground="#000000")
        self.button_load_file.configure(background="#d9d9d9")
        self.button_load_file.configure(disabledforeground="#a3a3a3")
        self.button_load_file.configure(foreground="#000000")
        self.button_load_file.configure(highlightbackground="#d9d9d9")
        self.button_load_file.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location,"./folder.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.button_load_file.configure(image=_img0)
        self.button_load_file.configure(pady="0")
        self.button_load_file.configure(text='''Open''')

        self.button_copy = tk.Button(self.frame1)
        self.button_copy.place(relx=0.916, rely=0.714, height=44, width=47)
        self.button_copy.configure(activebackground="#ececec")
        self.button_copy.configure(activeforeground="#000000")
        self.button_copy.configure(background="#d9d9d9")
        self.button_copy.configure(disabledforeground="#a3a3a3")
        self.button_copy.configure(font=font9)
        self.button_copy.configure(foreground="#000000")
        self.button_copy.configure(highlightbackground="#d9d9d9")
        self.button_copy.configure(highlightcolor="black")
        self.button_copy.configure(pady="0")
        self.button_copy.configure(text='''Copy''')

        self.button_save = tk.Button(self.frame1)
        self.button_save.place(relx=0.842, rely=0.714, height=44, width=47)
        self.button_save.configure(activebackground="#ececec")
        self.button_save.configure(activeforeground="#000000")
        self.button_save.configure(background="#d9d9d9")
        self.button_save.configure(disabledforeground="#a3a3a3")
        self.button_save.configure(font=font9)
        self.button_save.configure(foreground="#000000")
        self.button_save.configure(highlightbackground="#d9d9d9")
        self.button_save.configure(highlightcolor="black")
        self.button_save.configure(pady="0")
        self.button_save.configure(text='''Save''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





